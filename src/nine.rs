use std::collections::HashSet;

pub const SAMPLE: &str = "R 4
U 4
L 3
D 1
R 4
D 1
L 5
R 2";

// #[derive(Clone, Debug, PartialEq)]
// pub struct Snake {
//     pub head: (i32, i32),
//     pub tail: (i32, i32),
//     pub trail: HashSet<(i32, i32)>
// }

#[derive(Clone, Debug, PartialEq)]
pub struct Snake<const N: usize> {
    pub pieces: [(i32, i32); N],
    pub trail: HashSet<(i32, i32)>,
}

impl<const N: usize> Snake<N> {
    pub fn head(&self) -> (i32, i32) {
        self.pieces[0]
    }

    pub fn tail(&self) -> (i32, i32) {
        self.pieces[N - 1]
    }

    pub fn mv(mut self, dir: &str, dist: usize) -> Self {
        let mut h = self.head();
        let mut t = self.tail();
        for _ in 0..dist {
            // println!("h = {h:?}, moving {dir} {dist}");
            h = match dir {
                "U" => (h.0, h.1 + 1),
                "D" => (h.0, h.1 - 1),
                "L" => (h.0 - 1, h.1),
                "R" => (h.0 + 1, h.1),
                _ => unreachable!(),
            };
            let d = total_distance(t, h);
            if d.0.unsigned_abs() > 1 || d.1.unsigned_abs() > 1 {
                t = match dir {
                    "U" => (h.0, h.1 - 1),
                    "D" => (h.0, h.1 + 1),
                    "L" => (h.0 + 1, h.1),
                    "R" => (h.0 - 1, h.1),
                    _ => unreachable!(),
                }
            }
            self.trail.insert(t);
        }
        let mut arr = [(0, 0); N];
        arr[0] = h;
        arr[1] = t;
        Snake {
            pieces: arr,
            trail: self.trail,
        }
    }

    pub fn mv_all(mut self, dir: &str, dist: usize) -> Self {
        //println!("{}: {} =====", dir, dist);
        for _ in 0..dist {
            self.pieces[0] = match dir {
                "U" => (self.pieces[0].0, self.pieces[0].1 + 1),
                "D" => (self.pieces[0].0, self.pieces[0].1 - 1),
                "L" => (self.pieces[0].0 - 1, self.pieces[0].1),
                "R" => (self.pieces[0].0 + 1, self.pieces[0].1),
                _ => unreachable!(),
            };
            //println!("head: {:?}", self.pieces[0]);
            for n in 1..self.pieces.len() {
                let d = total_distance(self.pieces[n], self.pieces[n - 1]);
                let p = self.pieces[n - 1];
                self.pieces[n] = match d {
                    (2, 0) => (p.0 - 1, p.1),
                    (2, 1) => (p.0 - 1, p.1),
                    (2, -1) => (p.0 - 1, p.1),

                    (-2, 0) => (p.0 + 1, p.1),
                    (-2, 1) => (p.0 + 1, p.1),
                    (-2, -1) => (p.0 + 1, p.1),

                    (0, 2) => (p.0, p.1 - 1),
                    (1, 2) => (p.0, p.1 - 1),
                    (-1, 2) => (p.0, p.1 - 1),

                    (0, -2) => (p.0, p.1 + 1),
                    (1, -2) => (p.0, p.1 + 1),
                    (-1, -2) => (p.0, p.1 + 1),

                    (2, 2) => (p.0 - 1, p.1 - 1),
                    (2, -2) => (p.0 - 1, p.1 + 1),
                    (-2, 2) => (p.0 + 1, p.1 - 1),
                    (-2, -2) => (p.0 + 1, p.1 + 1),
                    _ => self.pieces[n]
                };
                //println!("piece {}: {:?}", n, self.pieces[n]);
            }
            self.trail.insert(*self.pieces.last().unwrap());
        }

        Snake {
            pieces: self.pieces,
            trail: self.trail,
        }
    }
}

fn total_distance(pos1: (i32, i32), pos2: (i32, i32)) -> (i32, i32) {
    let x_dist = pos2.0 - pos1.0;
    let y_dist = pos2.1 - pos1.1;
    (x_dist, y_dist)
}

#[derive(Debug)]
pub enum Either {
    Left(usize),
    Right(usize),
}

fn solve_first(input: &str) -> usize {
    let mut s = Snake {
        pieces: [(0, 0), (0, 0)],
        trail: HashSet::new(),
    };
    for line in input.lines() {
        let mut splits = line.split(' ');
        let dir = splits.next().unwrap();
        let dist = splits.next().unwrap().parse().unwrap();
        s = s.mv(dir, dist);
    }

    s.trail.len()
}

fn solve_second(input: &str) -> usize {
    let mut s = Snake {
        pieces: [(0, 0); 10],
        trail: HashSet::new(),
    };
    // println!("{s:?}");
    for line in input.lines() {
        let mut splits = line.split(' ');
        let dir = splits.next().unwrap();
        let dist = splits.next().unwrap().parse().unwrap();
        s = s.mv_all(dir, dist);
    }

    s.trail.len()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_total_dist() {
        assert_eq!((0, 0), total_distance((0, 0), (0, 0)));
        assert_eq!((0, -1), total_distance((0, 1), (0, 0)));
        assert_eq!((0, 0), total_distance((0, 1), (0, 1)));
        assert_eq!((2, -1), total_distance((0, 1), (2, 0)));
    }

    #[test]
    fn test_solve_first() {
        assert_eq!(13, solve_first(SAMPLE));
        assert_eq!(6037, solve_first(INPUT));
    }

    #[test]
    fn test_solve_second() {
        assert_eq!(1, solve_second(SAMPLE));
        assert_eq!(36, solve_second(SAMPLE_2));
        assert_eq!(2485, solve_second(INPUT));
    }
}

const SAMPLE_2: &str = "R 5
U 8
L 8
D 3
R 17
D 10
L 25
U 20";

const INPUT: &str = "D 1
U 2
R 2
U 1
R 1
U 2
L 2
D 1
L 2
R 1
L 1
R 1
U 2
D 2
L 2
R 2
L 2
R 1
L 1
D 1
U 1
R 1
U 2
D 1
U 1
D 1
R 2
D 1
U 1
R 1
L 2
R 2
U 2
R 2
L 2
R 2
U 2
D 2
R 1
U 2
D 2
U 2
D 1
L 1
D 1
L 1
R 2
D 2
R 2
D 1
R 2
L 1
R 1
L 2
D 2
U 1
D 1
R 2
L 2
D 2
L 2
D 2
L 1
R 2
L 1
D 1
L 2
D 1
U 1
R 1
U 1
R 2
D 2
R 1
U 2
D 1
L 2
D 2
L 1
D 1
L 1
D 1
R 1
L 1
U 1
D 2
U 1
D 2
R 1
D 2
L 2
U 1
L 1
R 1
D 1
U 1
D 1
R 1
U 2
L 1
D 1
U 2
R 2
D 2
R 1
D 1
R 1
L 1
R 2
U 1
D 1
L 1
U 3
L 2
U 2
L 2
D 2
L 1
R 3
D 1
U 1
L 3
D 3
U 1
L 2
U 1
R 2
U 3
D 2
L 3
U 2
R 2
D 2
U 1
R 1
L 3
D 2
L 3
D 1
U 3
R 3
U 3
D 3
U 3
L 3
U 1
D 1
U 1
D 3
R 3
D 3
U 3
R 3
L 3
R 2
U 3
D 3
L 1
R 2
D 2
U 1
R 1
L 2
D 3
R 3
D 1
U 1
D 1
U 2
D 1
R 1
D 2
R 2
L 1
D 2
L 1
R 2
L 3
R 3
L 1
U 3
R 3
U 3
D 1
L 3
R 1
L 1
R 2
L 1
U 2
R 1
D 2
R 3
L 3
R 2
U 3
R 3
L 1
R 1
L 1
U 1
L 2
R 2
L 3
D 2
L 2
R 3
D 3
U 1
L 2
D 3
U 3
D 3
R 1
U 1
L 2
U 1
L 1
R 1
U 3
L 2
R 1
D 4
R 3
D 3
L 3
D 4
R 4
L 3
R 2
D 2
R 4
U 2
D 3
L 1
R 2
U 4
R 3
D 2
U 1
D 4
R 1
D 3
U 3
L 2
R 2
L 3
R 3
L 4
D 3
L 2
U 3
L 1
R 2
D 4
R 3
U 3
L 2
U 3
D 2
L 4
D 4
L 4
U 4
R 1
D 1
R 3
U 3
R 3
D 3
L 1
U 1
R 3
L 2
R 2
D 2
R 4
U 4
L 4
D 3
L 2
R 4
L 2
D 1
L 2
R 4
U 2
L 2
U 3
L 4
R 2
L 4
D 2
L 1
D 4
L 3
U 2
D 1
R 4
U 2
D 1
R 4
D 4
U 3
R 3
U 4
L 1
D 3
U 1
D 3
R 2
U 1
R 3
L 4
R 1
L 4
D 3
R 4
U 2
L 1
D 4
L 2
R 4
L 2
R 3
L 3
U 2
R 3
L 2
R 1
D 4
L 3
D 3
L 5
D 1
R 3
D 4
L 4
R 2
D 5
R 2
L 2
D 5
U 2
D 1
U 2
D 3
L 2
D 1
L 3
U 1
D 3
R 2
U 4
R 5
D 5
U 3
R 1
D 5
U 1
D 4
R 1
U 4
D 4
R 4
U 5
D 4
R 1
L 1
D 5
L 1
D 4
U 1
D 2
U 1
D 1
R 1
D 2
R 2
D 1
L 5
R 3
L 4
D 3
R 5
D 4
U 2
R 2
U 2
D 2
U 5
L 4
D 5
L 5
R 3
D 2
U 4
D 2
L 3
R 2
L 1
U 2
R 4
L 5
R 4
D 1
U 5
D 4
L 5
R 2
U 4
D 3
L 3
D 3
L 1
U 5
L 4
R 1
U 5
D 4
R 2
L 1
D 2
R 3
L 2
R 5
D 5
R 2
L 1
U 3
D 2
L 1
U 1
R 4
U 1
D 1
U 1
R 2
U 3
R 4
L 4
R 1
U 3
R 3
D 1
L 3
R 4
L 1
U 5
D 6
U 2
L 4
D 2
U 1
D 4
R 5
L 2
R 6
L 6
U 1
D 4
L 3
D 5
U 4
L 4
R 2
D 2
L 3
D 1
U 6
L 6
R 2
D 2
U 3
L 6
R 1
U 5
R 5
U 5
D 1
L 2
U 1
R 1
D 5
L 6
R 1
D 4
R 3
L 3
D 2
U 5
D 6
U 3
D 6
U 4
L 2
R 1
U 5
D 2
L 1
D 4
U 1
R 2
L 2
R 4
D 1
L 6
D 5
L 6
R 6
L 3
U 5
R 4
D 4
L 3
D 2
L 1
R 4
U 3
R 2
U 2
R 5
D 1
U 5
D 4
R 4
L 5
D 5
U 3
R 1
U 4
L 5
U 1
D 2
U 4
D 4
L 1
U 2
L 3
U 5
R 1
L 5
U 1
R 4
D 2
L 6
U 6
R 6
U 5
R 6
U 6
L 5
U 1
L 5
D 3
R 1
D 4
L 3
D 7
U 1
D 4
R 2
U 4
D 4
U 7
D 3
L 3
D 3
R 4
D 7
R 4
D 5
U 3
L 5
R 5
D 5
L 2
R 3
L 2
R 4
U 2
L 4
U 7
L 2
U 6
D 3
U 6
R 2
D 2
U 6
L 2
R 4
U 5
D 2
R 4
L 2
D 2
R 1
D 3
R 1
D 3
U 4
D 2
L 4
D 1
L 5
U 1
R 2
D 3
U 4
D 4
L 5
R 2
D 2
U 1
D 7
L 7
R 2
L 6
D 4
R 7
L 3
U 2
D 2
U 4
L 5
D 4
U 4
R 5
L 5
D 2
R 5
L 7
U 1
D 7
L 3
R 4
L 5
D 5
L 2
R 5
L 3
R 2
L 4
R 1
D 3
L 5
R 2
D 4
U 3
R 3
L 5
D 3
R 1
D 5
R 5
L 1
D 6
R 5
D 4
U 2
L 4
U 1
D 3
L 2
D 7
R 4
L 1
U 6
R 8
L 2
U 2
R 1
U 7
D 6
L 7
R 3
U 5
R 4
L 8
D 2
R 4
U 8
L 6
R 1
L 7
D 5
L 3
R 6
U 1
D 7
L 2
U 7
R 1
U 6
L 3
R 8
D 5
L 4
R 4
L 6
D 6
R 3
L 2
U 5
R 3
D 1
R 7
L 1
U 8
D 2
U 3
D 1
L 2
U 6
L 1
U 4
R 6
U 7
R 1
D 1
U 8
R 1
D 7
L 1
U 4
D 1
U 2
R 8
U 1
D 6
R 1
U 1
R 5
L 7
R 3
D 3
U 8
L 6
D 7
U 8
L 4
R 1
L 7
U 4
D 3
L 3
R 6
D 3
U 8
L 5
D 8
L 1
U 7
R 6
L 5
U 8
R 2
L 8
R 7
L 8
U 7
D 7
U 3
D 4
U 8
D 5
U 3
L 4
D 4
U 8
R 7
U 7
L 7
R 4
L 1
D 8
R 9
D 4
R 8
L 5
R 9
U 5
D 1
L 5
D 7
U 3
R 5
U 1
R 3
U 2
D 9
U 5
R 3
U 4
R 3
D 4
U 7
D 9
L 7
D 3
U 1
R 3
U 4
L 3
R 8
L 3
U 8
R 6
L 6
D 7
L 7
D 4
L 3
U 5
L 2
R 5
D 3
U 6
L 9
R 9
D 9
U 9
R 4
D 8
R 8
D 5
L 7
U 2
R 4
L 8
R 4
L 2
R 3
L 7
R 1
U 1
L 5
D 5
R 9
D 8
U 7
L 3
R 5
D 1
U 1
R 5
D 6
U 9
D 8
R 4
D 7
L 1
U 5
D 8
L 4
D 4
L 7
D 8
R 5
U 9
D 2
L 1
R 2
U 8
D 4
L 6
D 1
L 5
D 6
R 9
U 1
L 9
U 4
D 6
R 8
L 5
R 1
L 2
R 7
D 8
L 4
R 3
U 2
L 7
U 2
D 1
R 8
U 8
L 1
R 1
D 2
U 3
L 5
D 6
L 3
U 6
R 2
L 5
U 6
L 5
D 3
L 6
D 2
L 4
U 10
R 4
D 7
U 4
D 4
L 5
U 3
L 9
R 7
D 1
L 4
U 4
D 5
R 5
D 4
U 1
D 3
R 1
L 6
U 1
D 1
L 4
U 5
D 10
R 4
U 5
R 1
U 2
R 4
D 6
L 7
U 1
R 2
D 1
L 7
D 4
U 9
L 6
D 8
R 3
U 7
R 8
U 2
D 5
R 3
U 10
D 3
R 3
U 1
R 8
D 10
R 3
D 1
U 10
L 5
U 8
D 6
L 9
D 5
U 1
R 9
U 3
D 3
R 8
L 9
D 8
U 3
R 2
D 3
L 7
D 3
R 10
L 9
U 2
R 8
U 8
R 5
U 3
L 9
U 1
D 7
L 7
R 5
L 8
U 8
L 9
R 10
U 1
R 5
L 5
D 7
L 8
D 5
U 4
L 4
U 6
D 4
L 8
U 8
L 10
D 1
L 2
D 3
U 8
L 7
R 7
U 6
D 4
U 8
L 2
R 6
L 7
D 11
R 4
D 9
L 10
U 3
L 9
U 10
L 11
U 11
D 2
U 4
D 5
L 11
D 4
L 6
U 2
D 8
R 4
U 4
D 5
U 8
L 3
U 2
R 7
U 10
R 5
L 3
R 11
U 2
D 8
U 3
R 10
U 10
L 3
R 7
L 8
D 5
U 9
D 9
R 3
U 4
L 6
D 9
R 10
L 2
R 8
U 11
L 2
R 1
U 11
R 2
D 3
U 9
R 3
L 2
R 1
L 6
R 10
L 2
U 6
R 4
L 9
U 11
L 1
R 11
U 8
L 4
R 11
L 6
D 5
L 11
U 3
D 5
R 5
U 2
L 3
R 4
L 9
R 7
U 11
R 7
U 7
D 10
R 11
D 10
L 3
D 5
U 2
L 1
U 2
R 2
U 8
R 1
L 10
R 10
U 5
D 4
U 4
R 4
L 8
R 6
U 9
R 5
L 3
U 9
L 3
D 4
R 10
D 11
L 12
R 1
U 11
L 10
R 11
D 10
R 10
L 4
U 11
D 2
R 8
L 6
U 7
D 7
L 12
U 1
L 3
D 8
R 6
L 7
R 11
L 2
R 6
U 2
R 2
L 2
U 5
R 12
U 12
D 12
U 1
D 6
L 5
U 3
D 3
L 4
R 10
L 5
U 2
D 8
R 4
D 5
L 7
U 2
R 10
D 12
R 9
U 11
D 10
R 4
U 2
D 1
U 10
D 8
R 2
L 9
D 12
U 12
D 2
U 8
R 5
L 8
D 5
U 9
D 8
U 7
R 3
L 10
U 11
L 5
U 12
L 2
U 9
D 7
R 12
U 9
R 2
L 3
U 10
D 9
L 7
U 5
R 3
D 3
L 11
D 1
R 5
L 1
U 5
L 6
D 8
L 2
D 5
U 8
D 9
R 8
L 7
D 6
L 6
D 1
U 5
L 4
R 6
U 9
L 3
U 3
D 7
L 1
D 4
L 9
R 9
U 6
D 8
U 12
L 5
D 4
R 7
L 2
D 4
U 7
R 7
U 2
R 13
D 5
L 1
R 5
D 6
U 2
L 1
U 5
D 2
R 9
L 8
U 9
D 9
U 12
R 10
U 9
L 13
R 5
D 10
L 9
U 4
D 12
U 12
R 13
D 12
U 7
R 12
D 8
L 8
U 2
D 10
L 2
D 5
U 3
R 11
D 4
R 4
L 1
R 1
D 9
U 6
R 10
U 12
L 10
R 13
D 7
R 12
L 5
R 10
D 4
R 11
L 7
R 7
U 7
D 7
U 11
L 3
R 9
L 12
D 11
R 5
D 5
R 7
D 7
U 3
L 11
D 11
L 10
U 7
L 13
R 6
L 10
U 10
D 10
L 4
R 5
U 5
D 2
L 6
D 8
U 1
R 12
D 11
U 3
L 9
R 10
U 8
R 10
D 2
R 3
U 9
D 7
L 6
R 9
D 2
U 11
R 3
D 1
R 4
L 11
U 13
R 12
U 12
R 8
L 13
U 7
D 10
R 11
L 2
U 9
L 3
R 5
L 4
R 11
D 5
R 1
L 11
U 10
R 4
L 1
U 2
D 8
L 7
U 1
L 4
D 1
R 1
L 11
U 8
R 11
U 4
R 10
L 6
D 7
U 9
L 14
U 1
R 10
U 12
R 1
L 6
D 9
U 10
L 10
D 5
R 14
U 3
R 13
U 3
L 13
U 8
L 10
U 7
R 12
U 11
R 6
U 6
D 6
R 2
L 7
R 8
U 8
D 3
R 8
L 12
U 11
D 9
U 6
R 8
D 8
U 9
R 12
L 11
U 10
L 14
R 9
D 8
U 14
L 9
D 11
U 2
R 2
U 4
R 7
U 11
L 8
D 12
L 11
U 13
L 1
D 8
U 8
L 10
U 12
R 11
U 3
D 12
L 1
D 8
L 4
D 3
L 2
U 8
D 9
L 1
U 9
D 15
U 5
L 9
D 2
U 4
L 2
U 15
L 8
R 2
U 1
L 3
D 10
L 15
U 2
R 14
D 1
U 13
D 4
R 8
D 6
R 5
D 13
L 5
R 6
U 14
L 15
D 15
U 12
L 1
D 3
L 6
D 2
R 4
D 10
U 12
R 13
L 3
R 15
D 13
U 15
D 14
U 8
D 10
U 5
D 11
R 15
D 7
R 1
D 2
L 5
U 11
L 14
U 9
D 13
R 12
U 10
R 11
D 9
R 6
D 7
L 7
U 14
D 12
L 6
D 15
U 11
R 1
U 3
L 11
R 3
L 9
R 9
L 11
R 12
U 6
R 13
D 13
L 9
U 3
D 6
L 4
D 3
U 15
D 13
U 9
D 1
U 13
D 12
L 4
U 6
R 11
D 2
R 7
U 9
R 11
U 3
L 7
U 4
R 2
D 14
U 3
D 14
R 13
L 4
R 1
U 12
D 10
L 8
D 2
L 15
U 1
D 4
U 16
R 15
D 1
R 8
U 14
L 12
U 2
R 1
D 16
L 10
R 11
D 10
L 15
R 7
U 10
L 3
U 11
D 1
L 5
D 3
U 8
R 3
U 5
R 2
D 11
L 2
D 7
L 2
U 3
L 12
D 13
L 12
U 7
R 11
L 4
R 11
L 8
U 16
L 1
R 11
L 4
U 15
L 16
R 15
U 6
R 4
U 3
D 16
R 9
U 8
R 5
U 6
L 2
R 2
D 10
R 7
D 13
U 13
R 14
D 3
L 15
R 3
D 11
L 4
U 12
D 1
U 8
R 8
L 4
D 6
L 15
U 7
D 15
L 11
U 14
D 8
U 15
L 12
R 6
U 13
R 5
U 2
L 1
R 13
D 10
R 7
L 9
U 14
R 1
D 13
L 11
U 9
L 13
R 5
D 14
R 16
U 5
D 9
R 2
D 5
R 8
L 8
U 16
D 12
R 3
U 3
D 5
U 12
D 14
L 9
U 12
R 6
L 9
U 3
D 16
U 15
R 6
D 11
R 10
D 3
U 16
L 11
R 2
L 2
R 9
D 12
L 8
D 8
R 13
L 5
D 17
L 7
D 10
U 13
L 11
U 17
L 13
R 2
D 6
R 14
D 14
L 15
R 8
D 4
U 7
L 6
R 6
U 7
D 12
R 9
L 8
D 15
L 14
R 1
U 8
L 13
D 16
R 2
U 2
L 2
D 13
U 8
D 6
U 10
L 9
R 2
L 7
U 5
R 6
U 12
D 3
R 1
U 4
R 17
U 11
L 3
U 13
L 12
U 6
R 5
D 12
R 4
U 4
R 3
D 11
U 7
L 10
D 12
U 12
D 9
R 4
L 2
R 9
L 13
D 16
L 14
D 5
L 8
D 6
L 13
U 1
R 7
U 5
R 2
U 11
L 10
D 14
R 11
L 5
D 16
U 9
D 3
U 11
D 1
U 5
D 3
U 8
L 1
D 1
U 5
L 17
D 9
L 14
R 8
D 15
R 10
U 4
R 1
U 3
R 5
L 13
D 6
L 15
U 10
L 5
R 14
L 1
R 6
D 10
L 13
D 3
L 1
U 10
D 6
R 16
D 6
R 4
D 9
U 9
D 4
R 1
D 10
R 7
D 14
R 10
D 14
U 14
D 15
R 11
L 16
D 18
R 6
U 8
D 18
R 18
D 14
U 9
R 18
U 14
L 18
U 1
R 14
D 1
U 6
R 3
L 13
D 4
L 9
D 2
U 5
D 6
U 9
L 13
U 12
R 11
D 17
U 17
L 8
U 15
R 16
L 9
D 2
R 16
D 2
L 9
D 9
R 15
D 10
L 12
R 14
L 4
R 17
D 15
U 16
R 7
D 4
U 4
L 7
D 16
R 11
D 2
U 2
L 7
U 15
L 5
U 14
L 7
U 15
D 9
L 14
D 13
U 11
R 10
U 15
L 5
U 16
D 13
U 15
L 18
R 1
D 17
U 18
R 19
L 4
R 15
U 12
D 19
R 5
D 18
L 14
U 5
L 4
R 6
U 15
L 7
R 11
L 15
U 12
D 3
R 14
U 1
L 4
R 3
U 15
L 15
R 6
L 3
U 2
D 6
L 6
D 16
L 19
U 9
L 2
R 13
U 8
R 17
D 17
L 4
R 2
L 7
R 11
D 5
L 14
D 7
R 13
D 2
L 18
U 11
R 2
D 18
U 2
D 6
L 4
U 2
L 15
R 4
D 8
R 1
U 16
L 4
R 5
U 16
D 14
U 2
D 19
L 6
D 14
U 17
L 3
R 11
L 2
R 11
U 11
D 4
U 13
L 6
U 14
D 17
U 15
D 7
R 8
U 3
R 15
D 17
U 16
R 3
D 17
L 9
U 15
R 15
L 11
R 18
D 16
R 17
D 3
L 17
D 4
L 10
U 2
R 2
D 9
L 17
R 19";
